Danny Sullivan - PA1 README

This program takes in a year and produces a calendar for the given year. It is run by going to the desired folder in the command shell and then typing "./PA1" into the terminal (without the quotation marks). The terminal will then prompt you to enter a year. This number cannot be a negative number.

I encountered problems with this mainly working around not being able to use arrays. Not being able to use arrays made me have to think much differently than I originally would have thought. I had trouble concenptualizing the math of determining the first day of the week, but as soon as I created a base year I found it much easier. I also had an error making my getFDOW function. When running any year other than the base year, I ended up hitting an infinite loop. It took a while, but I realized that it was due not having any incrementing or decrementing. As soon as I added that, the program ran for all years. 

I used several loops for this program. In my getFDOW class, I used while loops to find the first day of the week. In order to get the first day of the week, I had to use two while loops. One while would determine the first day of the week if the week was less than the base year of 2017. The next while loop would determine the first day of the week for the years beyond the base year. It first determines if it is a leap year or not. If it is a leap year, the day of the week is either subtracted by two (for years before base year) or added two (for years after base year). If it is not a leap year, the first day is subtracted by one (for years before base year) or added by one (for years after base year). If the integer was less that 0 (representing Sunday), then 7 was added, representing another week. the function then returned the first day of the week as an integer.
In the printMonth function, two for loops are run. The first for loop is run to add spaces in between all the days after the first day of the week. This allows it to line up properly with each day of the week. The second for loop prints spaces in between every other day of the week. If the week reaches 7 days, it then prints a new line. If it is not 7 days, it prints out two spaces to even out the spacing in between days.
The last for loop I used was in printCalendar. This for loop went through all the months and prints out each one individually. 